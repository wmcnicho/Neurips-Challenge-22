/work/nashokkumar_umass_edu/nipschal/Neurips-Challenge-22/predict_graph_embed_mask.py:546: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(dataset_tensor[:, 1, :].clone().detach(), dtype=torch.long)
PermutedDKT
Number of questions:  20
Number of students:  9
Number of concepts: 52
Using batch size: 64
Using batch size: 64
AFTER LOADING THE MODEL
Successfull in data prepration!
Successfully loaded the optimizer
======== Epoch 1 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0015,  0.0246,  0.0059,  ...,  0.0107,  0.0326, -0.0274],
        [ 0.0304, -0.0397,  0.0289,  ..., -0.0355,  0.0102,  0.0254],
        [ 0.0031,  0.0096,  0.0165,  ...,  0.0402,  0.0446,  0.0445],
        ...,
        [-0.0099,  0.0074, -0.0230,  ..., -0.0272,  0.0290,  0.0250],
        [ 0.0198,  0.0214, -0.0435,  ...,  0.0156,  0.0108, -0.0012],
        [-0.0146, -0.0339, -0.0197,  ..., -0.0167,  0.0153, -0.0006]],
       requires_grad=True)
step loss: tensor(0.6898, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.69
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0019,  0.0250,  0.0063,  ...,  0.0103,  0.0322, -0.0278],
        [ 0.0300, -0.0402,  0.0285,  ..., -0.0351,  0.0106,  0.0258],
        [ 0.0027,  0.0092,  0.0161,  ...,  0.0407,  0.0450,  0.0450],
        ...,
        [-0.0096,  0.0077, -0.0227,  ..., -0.0274,  0.0287,  0.0247],
        [ 0.0202,  0.0218, -0.0431,  ...,  0.0152,  0.0104, -0.0016],
        [-0.0150, -0.0344, -0.0201,  ..., -0.0162,  0.0157, -0.0002]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 2 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0019,  0.0250,  0.0063,  ...,  0.0103,  0.0322, -0.0278],
        [ 0.0300, -0.0402,  0.0285,  ..., -0.0351,  0.0106,  0.0258],
        [ 0.0027,  0.0092,  0.0161,  ...,  0.0407,  0.0450,  0.0450],
        ...,
        [-0.0096,  0.0077, -0.0227,  ..., -0.0274,  0.0287,  0.0247],
        [ 0.0202,  0.0218, -0.0431,  ...,  0.0152,  0.0104, -0.0016],
        [-0.0150, -0.0344, -0.0201,  ..., -0.0162,  0.0157, -0.0002]],
       requires_grad=True)
step loss: tensor(0.6878, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.69
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0023,  0.0254,  0.0067,  ...,  0.0099,  0.0318, -0.0281],
        [ 0.0296, -0.0405,  0.0281,  ..., -0.0347,  0.0110,  0.0262],
        [ 0.0023,  0.0088,  0.0157,  ...,  0.0410,  0.0454,  0.0453],
        ...,
        [-0.0093,  0.0080, -0.0225,  ..., -0.0277,  0.0284,  0.0244],
        [ 0.0206,  0.0222, -0.0427,  ...,  0.0147,  0.0099, -0.0020],
        [-0.0153, -0.0347, -0.0205,  ..., -0.0159,  0.0161,  0.0002]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 3 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0023,  0.0254,  0.0067,  ...,  0.0099,  0.0318, -0.0281],
        [ 0.0296, -0.0405,  0.0281,  ..., -0.0347,  0.0110,  0.0262],
        [ 0.0023,  0.0088,  0.0157,  ...,  0.0410,  0.0454,  0.0453],
        ...,
        [-0.0093,  0.0080, -0.0225,  ..., -0.0277,  0.0284,  0.0244],
        [ 0.0206,  0.0222, -0.0427,  ...,  0.0147,  0.0099, -0.0020],
        [-0.0153, -0.0347, -0.0205,  ..., -0.0159,  0.0161,  0.0002]],
       requires_grad=True)
step loss: tensor(0.6859, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.69
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0026,  0.0257,  0.0070,  ...,  0.0096,  0.0315, -0.0284],
        [ 0.0293, -0.0409,  0.0278,  ..., -0.0344,  0.0114,  0.0266],
        [ 0.0020,  0.0085,  0.0154,  ...,  0.0414,  0.0457,  0.0457],
        ...,
        [-0.0090,  0.0083, -0.0222,  ..., -0.0280,  0.0281,  0.0242],
        [ 0.0210,  0.0226, -0.0423,  ...,  0.0144,  0.0096, -0.0024],
        [-0.0156, -0.0350, -0.0208,  ..., -0.0156,  0.0164,  0.0005]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 4 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0026,  0.0257,  0.0070,  ...,  0.0096,  0.0315, -0.0284],
        [ 0.0293, -0.0409,  0.0278,  ..., -0.0344,  0.0114,  0.0266],
        [ 0.0020,  0.0085,  0.0154,  ...,  0.0414,  0.0457,  0.0457],
        ...,
        [-0.0090,  0.0083, -0.0222,  ..., -0.0280,  0.0281,  0.0242],
        [ 0.0210,  0.0226, -0.0423,  ...,  0.0144,  0.0096, -0.0024],
        [-0.0156, -0.0350, -0.0208,  ..., -0.0156,  0.0164,  0.0005]],
       requires_grad=True)
step loss: tensor(0.6842, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.68
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0028,  0.0259,  0.0072,  ...,  0.0094,  0.0313, -0.0287],
        [ 0.0290, -0.0412,  0.0275,  ..., -0.0341,  0.0117,  0.0269],
        [ 0.0017,  0.0082,  0.0151,  ...,  0.0416,  0.0460,  0.0459],
        ...,
        [-0.0087,  0.0085, -0.0219,  ..., -0.0283,  0.0279,  0.0239],
        [ 0.0213,  0.0229, -0.0420,  ...,  0.0141,  0.0093, -0.0027],
        [-0.0159, -0.0352, -0.0210,  ..., -0.0154,  0.0166,  0.0007]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 5 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0028,  0.0259,  0.0072,  ...,  0.0094,  0.0313, -0.0287],
        [ 0.0290, -0.0412,  0.0275,  ..., -0.0341,  0.0117,  0.0269],
        [ 0.0017,  0.0082,  0.0151,  ...,  0.0416,  0.0460,  0.0459],
        ...,
        [-0.0087,  0.0085, -0.0219,  ..., -0.0283,  0.0279,  0.0239],
        [ 0.0213,  0.0229, -0.0420,  ...,  0.0141,  0.0093, -0.0027],
        [-0.0159, -0.0352, -0.0210,  ..., -0.0154,  0.0166,  0.0007]],
       requires_grad=True)
step loss: tensor(0.6827, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.68
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0030,  0.0261,  0.0074,  ...,  0.0092,  0.0311, -0.0288],
        [ 0.0287, -0.0414,  0.0272,  ..., -0.0338,  0.0119,  0.0271],
        [ 0.0015,  0.0080,  0.0149,  ...,  0.0418,  0.0462,  0.0462],
        ...,
        [-0.0085,  0.0088, -0.0217,  ..., -0.0285,  0.0277,  0.0237],
        [ 0.0216,  0.0232, -0.0417,  ...,  0.0138,  0.0090, -0.0030],
        [-0.0160, -0.0354, -0.0212,  ..., -0.0152,  0.0168,  0.0009]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 6 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0030,  0.0261,  0.0074,  ...,  0.0092,  0.0311, -0.0288],
        [ 0.0287, -0.0414,  0.0272,  ..., -0.0338,  0.0119,  0.0271],
        [ 0.0015,  0.0080,  0.0149,  ...,  0.0418,  0.0462,  0.0462],
        ...,
        [-0.0085,  0.0088, -0.0217,  ..., -0.0285,  0.0277,  0.0237],
        [ 0.0216,  0.0232, -0.0417,  ...,  0.0138,  0.0090, -0.0030],
        [-0.0160, -0.0354, -0.0212,  ..., -0.0152,  0.0168,  0.0009]],
       requires_grad=True)
step loss: tensor(0.6814, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.68
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0032,  0.0263,  0.0075,  ...,  0.0090,  0.0309, -0.0290],
        [ 0.0285, -0.0416,  0.0270,  ..., -0.0336,  0.0121,  0.0273],
        [ 0.0013,  0.0078,  0.0147,  ...,  0.0420,  0.0464,  0.0464],
        ...,
        [-0.0083,  0.0090, -0.0215,  ..., -0.0287,  0.0275,  0.0235],
        [ 0.0218,  0.0234, -0.0415,  ...,  0.0136,  0.0088, -0.0032],
        [-0.0162, -0.0355, -0.0213,  ..., -0.0151,  0.0169,  0.0010]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 7 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0032,  0.0263,  0.0075,  ...,  0.0090,  0.0309, -0.0290],
        [ 0.0285, -0.0416,  0.0270,  ..., -0.0336,  0.0121,  0.0273],
        [ 0.0013,  0.0078,  0.0147,  ...,  0.0420,  0.0464,  0.0464],
        ...,
        [-0.0083,  0.0090, -0.0215,  ..., -0.0287,  0.0275,  0.0235],
        [ 0.0218,  0.0234, -0.0415,  ...,  0.0136,  0.0088, -0.0032],
        [-0.0162, -0.0355, -0.0213,  ..., -0.0151,  0.0169,  0.0010]],
       requires_grad=True)
step loss: tensor(0.6804, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.68
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0033,  0.0264,  0.0077,  ...,  0.0089,  0.0308, -0.0291],
        [ 0.0284, -0.0418,  0.0268,  ..., -0.0335,  0.0123,  0.0275],
        [ 0.0012,  0.0077,  0.0146,  ...,  0.0421,  0.0465,  0.0465],
        ...,
        [-0.0081,  0.0091, -0.0214,  ..., -0.0288,  0.0273,  0.0233],
        [ 0.0220,  0.0236, -0.0413,  ...,  0.0134,  0.0086, -0.0034],
        [-0.0162, -0.0356, -0.0213,  ..., -0.0150,  0.0170,  0.0011]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 8 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0033,  0.0264,  0.0077,  ...,  0.0089,  0.0308, -0.0291],
        [ 0.0284, -0.0418,  0.0268,  ..., -0.0335,  0.0123,  0.0275],
        [ 0.0012,  0.0077,  0.0146,  ...,  0.0421,  0.0465,  0.0465],
        ...,
        [-0.0081,  0.0091, -0.0214,  ..., -0.0288,  0.0273,  0.0233],
        [ 0.0220,  0.0236, -0.0413,  ...,  0.0134,  0.0086, -0.0034],
        [-0.0162, -0.0356, -0.0213,  ..., -0.0150,  0.0170,  0.0011]],
       requires_grad=True)
step loss: tensor(0.6795, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
        [ 0.0222,  0.0238, -0.0412,  ...,  0.0132,  0.0084, -0.0036],
        [-0.0163, -0.0356, -0.0214,  ..., -0.0150,  0.0170,  0.0012]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 9 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0033,  0.0265,  0.0077,  ...,  0.0088,  0.0307, -0.0292],
        [ 0.0282, -0.0419,  0.0267,  ..., -0.0334,  0.0124,  0.0276],
        [ 0.0011,  0.0076,  0.0145,  ...,  0.0422,  0.0466,  0.0466],
        ...,
        [-0.0080,  0.0092, -0.0212,  ..., -0.0289,  0.0272,  0.0232],
        [ 0.0222,  0.0238, -0.0412,  ...,  0.0132,  0.0084, -0.0036],
        [-0.0163, -0.0356, -0.0214,  ..., -0.0150,  0.0170,  0.0012]],
       requires_grad=True)
step loss: tensor(0.6788, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
  Average training loss: 0.68
batch input size: torch.Size([2, 20]) Device: -1
Parameter containing:
tensor([[ 0.0034,  0.0265,  0.0078,  ...,  0.0088,  0.0307, -0.0292],
        [ 0.0282, -0.0420,  0.0266,  ..., -0.0333,  0.0125,  0.0277],
        [ 0.0010,  0.0075,  0.0145,  ...,  0.0423,  0.0466,  0.0466],
        ...,
        [-0.0079,  0.0093, -0.0212,  ..., -0.0290,  0.0271,  0.0231],
        [ 0.0223,  0.0238, -0.0411,  ...,  0.0131,  0.0083, -0.0037],
        [-0.0163, -0.0356, -0.0214,  ..., -0.0150,  0.0170,  0.0012]],
       requires_grad=True)
  Average validation loss: 0.69
======== Epoch 10 / 10 ========
Training...
Step: 0
batch input size: torch.Size([7, 20]) Device: -1
Parameter containing:
tensor([[ 0.0034,  0.0265,  0.0078,  ...,  0.0088,  0.0307, -0.0292],
        [ 0.0282, -0.0420,  0.0266,  ..., -0.0333,  0.0125,  0.0277],
        [ 0.0010,  0.0075,  0.0145,  ...,  0.0423,  0.0466,  0.0466],
        ...,
        [-0.0079,  0.0093, -0.0212,  ..., -0.0290,  0.0271,  0.0231],
        [ 0.0223,  0.0238, -0.0411,  ...,  0.0131,  0.0083, -0.0037],
        [-0.0163, -0.0356, -0.0214,  ..., -0.0150,  0.0170,  0.0012]],
       requires_grad=True)
step loss: tensor(0.6783, grad_fn=<DivBackward0>)
AFTER FORWARD PASS
        [ 0.0222,  0.0238, -0.0412,  ...,  0.0132,  0.0084, -0.0036],
        [ 0.0222,  0.0238, -0.0412,  ...,  0.0132,  0.0084, -0.0036],